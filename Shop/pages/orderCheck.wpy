<style lang="less">
.input {
  display: flex;
  align-items: center;
  line-height: 80rpx;
  padding: 0 40rpx;
}
.radio-group {
  line-height: 80rpx;
  padding: 20rpx 40rpx;
}
.input view {
  width: 120rpx;
}
.input input {
  flex: 1;
  height: 80rpx;
  line-height: 80rpx;
}
</style>
<template>
  <view class="container">
    <noorder show="2" wx:if="{{orderList.length==0}}" text="暂无订单"></noorder>
    <repeat for="{{orderList}}" wx:key="{{index}}">
      <orderList
        :orderList.sync="item"
        :goodsMap.sync="goodsMap[index]"
        @orderDetail.user="orderDetail"
      >
        <view slot="btn">
          <radio-group class="radio-group" bindchange="radioChange">
            <label class="radio" wx:for="{{items}}">
              <radio value="{{item.pay_id}}" color="#e50012"/>
              {{item.name}}
            </label>
          </radio-group>
          <view class="input" wx:if="{{isShowNote}}">
            <view>备注：</view>
            <input @input="inputChange">
          </view>
          <orderbutton
            :orderDetail.sync="item"
            :is_friend.sync="is_friend"
            @payStatusTap.user="payTap"
            @cancelOrderTap.user="cancelOrderTap"
          ></orderbutton>
        </view>
      </orderList>
    </repeat>
  </view>
</template>

<script>
import wepy from 'wepy';
import newapi from '../../API/newapi';
import noorder from '../../components/noOrder';
import orderList from '../../components/shop/orderList';
import orderbutton from '../../components/shop/orderbutton';
import util from '../../utils/index';

export default class newslist extends wepy.page {
  config = {
    navigationBarTitleText: '待审核订单'
  };
  components = {
    noorder,
    orderList,
    orderbutton
  };
  data = {
    orderList: [],
    goodsMap: [],
    is_friend: '1',
    isShowNote: false,
    items: [
      {
        name: '线上支付',
        pay_id: '0'
      },
      {
        name: '线下支付',
        pay_id: '2'
      },
      {
        name: '会员卡支付',
        pay_id: '4'
      }
    ]
  };
  computed = {};
  methods = {
    radioChange(e) {
      this.pay_id = e.detail.value;
      // 0是线上 2是线下 4会员卡支付
      if (e.detail.value == 2) {
        this.isShowNote = true;
      } else {
        this.isShowNote = false;
      }
    },
    inputChange(e) {
      this.pay_note = e.detail.value;
    },
    async payTap(id) {
      if (!this.pay_id) {
        util.showToast('请选择支付方式');
        return;
      }

      if (this.pay_id == 0) var pay_name = '线上支付';
      else if (this.pay_id == 2) var pay_name = '线下支付';
      else if (this.pay_id == 4) var pay_name = '会员卡支付';
      let mRes = await util.showModalBig('你确定使用' + pay_name + '吗');
      if (mRes.cancel) {
        return;
      }
      util.showLoading('支付中...');
      // 线上支付
      if (this.pay_id == 0) {
        var res = await util.wxpay1(id);
        wx.hideLoading();
        if (res.code == 1) {
          this.getOrderList();
        }
        util.showToast(res.msg);
      } else if (this.pay_id == 2) {
        // 线下支付
        var pay_id = this.pay_id;
        var pay_note = this.pay_note ? this.pay_note : '';
        let data = {
          id,
          pay_id,
          pay_note
        };
        let res = await newapi.xianxiaorder(data);
        wx.hideLoading();
        if (res.data && res.data.code == 0) {
          this.getOrderList();
          util.showToast('支付成功');
        }
      } else {
        var pay_id = this.pay_id;
        var cardPayRes = await this.cardPay(id);
        wx.hideLoading();
        if (cardPayRes.data && cardPayRes.data.code == 0) {
          this.getOrderList();
          util.showToast('支付成功');
        } else {
          util.showToast(cardPayRes.data.message);
        }
      }
    },
    cancelOrderTap() {
      this.getOrderList(1);
    },
    // 订单详情
    orderDetail(id, evt) {
      wx.navigateTo({
        url: 'orderDetail?id=' + id
      });
    }
  };
  events = {};
  // 会员卡支付
  async cardPay(id) {
    let data = { id };
    return await newapi.cardpay(data);
  }
  //  订单列表
  async getOrderList(page = 1) {
    var friend_id = this.user_id;
    util.showLoading();
    let data = {
      friend_id,
      order_status: 9,
      page
    };
    let res = await newapi.orderList(data);

    wx.hideLoading();
    var orderList = res.data.data.orderList;
    var goodsMap = res.data.data.goodsMap;
    orderList.forEach((item, index) => {
      orderList[index].add_time = util.formatDate(item.add_time);
    });
    if (page == 1) {
      this.orderList = orderList;
      this.goodsMap = goodsMap;
    } else {
      this.orderList.push(...orderList);
      this.goodsMap.push(...goodsMap);
    }
    if (orderList.length < 10) {
      this.isMoreData = false;
    }
    this.$apply();
  }
  async onLoad(option) {
    await this.$parent.loginInfo();
    var userInfo = await this.$parent.getUserInfo();
    this.user_id = userInfo.user_id;
    this.isMoreData = true;
    this.getOrderList();
    this.$apply();
  }
  onReachBottom() {
    if (this.isMoreData) {
      util.showLoading();
      this.page = this.page + 1;
      this.getOrderList(this.page);
    }
  }
}
</script>
