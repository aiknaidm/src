<style lang="less">
  .tip {
    background-color: #FFFFFF;
    margin: ~"20rpx";
  }
</style>
<template>

  <view class="tip">
    <htmlParser :parserName="name1" :parserContent.sync="content1"/>
  </view>

  <!--<veiw class="tip">-->
  <!--<htmlParser2 :parserName="name2" :parserContent.sync="content2"/>-->
  <!--</veiw>-->
  <!--<veiw class="tip">-->
  <!--<htmlParser3 :parserName="name3" :parserContent.sync="content3"/>-->
  <!--</veiw>-->

</template>
<script>
  import wepy from 'wepy'
  import htmlParser from '../components/htmlParser'
  import { API_URL, common, httpUtils } from '../config'

  export default class photodetail extends wepy.page {

    config = {
      'navigationBarTitleText': '河西印象',
      'navigationBarTextStyle': 'white',
      'navigationBarBackgroundColor': '#323d4a'
    }

    components = {
      htmlParser: htmlParser,
//      htmlParser2: htmlParser,
//      htmlParser3: htmlParser
    }

    mixins = []

    data = {
      name1: 'myHtmlParserKiner1',
//      name2: "myHtmlParserKiner2",
//      name3: "myHtmlParserKiner3",

      content1: '<text style=\'color: gray;\'> </text>',
//      content2: "<text style='color: red;'>新2</text>",
//      content3: ""
    }

    methods = {}

    events = {}

    onLoad (option) {
      if (!option.id) return
      let that = this

      httpUtils.get(`${API_URL.edit}?id=${option.id}`)
        .then((data) => {
          that.content1 = data.content
          //注意，在此处修改了content2之后，需要手动调用$apply()方法更新数据
          that.$apply()
          //调用通知接口通知组件更新数据
          that.$invoke('htmlParser', 'htmlParserNotice')
        })

//      httpUtils.get({
//          url: `${API_URL.edit}`,
//          params: {id: option.id},
//          success: function (data) {
//            that.content1 = data.content
//            //注意，在此处修改了content2之后，需要手动调用$apply()方法更新数据
//            that.$apply()
//            //调用通知接口通知组件更新数据
//            that.$invoke('htmlParser', 'htmlParserNotice')
//          }
//        }
//      )
    };
  }

</script>
